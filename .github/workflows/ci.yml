name: Python package

on: [push]

jobs:
  build_wheels:
  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        ref: ${{ github.ref }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
        # cache: "pip"
    - name: Check package
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install check-manifest flake8
        check-manifest
        flake8 .
    - name: Install dependencies
      run: |
        python -c "import configparser; c = configparser.ConfigParser(); c.read('setup.cfg'); print(c['options']['install_requires'])" > requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run package creation
      run: |
        python -m pip install --user --upgrade build
        python -m build
    - name: Run Unit Tests and generate coverage report
      run: |
        pip install coverage
        coverage run -m unittest discover
        coverage report -m
        coverage xml
        coverage html
#    - uses: actions/upload-artifact@v4
#      with:
#        path: ./wheelhouse/*.whl
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        verbose: false
    #- name: Archive code coverage html report
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: code-coverage-report
    #    path: htmlcov
    #- name: Archive package
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: imagedata
    #    path: src/dist

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Install dependencies
        run: |
          pip install --upgrade pip wheel
          pip install imagedata

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz



  publish-to-pypi:
    name: Publish Python distribution to PyPi
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      contents: read
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@latest
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Upload distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
